name: Check PR

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  BUILD_VERSION: '$(Build.BuildId)'
  iothubname: 'edge-test-hub1'
  edgeDeviceId: 'edge02'
  ENDPOINT: $(azureSubscriptionEndpoint)

steps:
- script: pip install -U iotedgedev
  displayName: 'Install IoT Edge Dev Tool'

- script: az extension add --name azure-iot
  displayName: 'Install azure-iot extension'

- task: DotNetCoreCLI@2
  displayName: 'Build C# projects and run unit tests'
  inputs:
    command: 'test' 
    projects: '**/*.csproj'
    arguments: '--collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true'

# - task: DotNetCoreCLI@2
#   displayName: "Install dotnet format"
#   inputs:
#     command: 'custom'
#     custom: 'tool'
#     arguments: 'install -g dotnet-format'

# - script: |
#    dotnet format tests/TimeSeriesRepository.Test/ --check --fix-style warn --fix-whitespace 
#    dotnet format modules/RedisTimeSeriesEdge --check --fix-style warn --fix-whitespace  
#   displayName: 'Lint dotnet code'
  
# - task: DotNetCoreCLI@2
#   displayName: Install ReportGenerator tool
#   inputs:
#     command: custom
#     custom: tool
#     arguments: install --tool-path . dotnet-reportgenerator-globaltool

# - script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
#   displayName: Create reports

# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish code coverage report'
#   inputs:
#     codeCoverageTool: 'Cobertura'
#     summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'

# - task: AzureIoTEdge@2
#   displayName: 'Build module images'
#   inputs:
#     action: 'Build module images'
#     templateFilePath: 'deployment.template.json'
#     defaultPlatform: 'amd64'

- task: AzureIoTEdge@2
  displayName: 'Push module images'
  inputs:
    action: 'Push module images'
    containerregistrytype: 'Azure Container Registry'
    azureSubscriptionEndpoint: '$(ENDPOINT)'
    azureContainerRegistry: '{"loginServer":"$(CONTAINER_REGISTRY_SERVER)", "id":"/subscriptions/$(ENDPOINT)"}'
    templateFilePath: 'deployment.template.json'
    defaultPlatform: 'amd64'
    fillRegistryCredential: 'true'

- task: AzureIoTEdge@2
  displayName: 'Generate deployment manifest'
  inputs:
    action: 'Generate deployment manifest'
    templateFilePath: 'deployment.template.json'
    defaultPlatform: 'amd64'
    deploymentManifestOutputPath: '$(System.DefaultWorkingDirectory)/config/deployment.json'
    validateGeneratedDeploymentManifest: 'true'
    fillRegistryCredential: 'true'

- task: AzureIoTEdge@2
  displayName: 'Deploy to IoT Edge devices'
  inputs:
    action: 'Deploy to IoT Edge devices'
    deploymentFilePath: '$(System.DefaultWorkingDirectory)/config/deployment.json'
    azureSubscription: '$(ENDPOINT)'
    iothubname: '$(iothubname)'
    deploymentid: '$(System.TeamProject)-devops-deployment'
    priority: '0'
    deviceOption: 'Single Device'
    deviceId: '$(edgeDeviceId)'
